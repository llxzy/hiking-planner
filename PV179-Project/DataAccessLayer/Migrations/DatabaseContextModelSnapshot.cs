// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DataAccessLayer.DataClasses.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TripCount")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<double>("Long")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("PermanentlyAdded")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("DownvoteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Flagged")
                        .HasColumnType("boolean");

                    b.Property<int>("ReviewedTripId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewedTripId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.TripLocation", b =>
                {
                    b.Property<int>("AssociatedLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("AssociatedTripId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("AssociatedLocationId", "AssociatedTripId");

                    b.HasIndex("AssociatedTripId");

                    b.ToTable("TripLocations");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("MailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.UserReviewVote", b =>
                {
                    b.Property<int>("AssociatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("AssociatedReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("AssociatedUserId", "AssociatedReviewId");

                    b.HasIndex("AssociatedReviewId");

                    b.ToTable("UserReviewVotes");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.UserTrip", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TripId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("UserTrips");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Challenge", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.User", "User")
                        .WithMany("Challenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Review", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.DataClasses.Trip", "ReviewedTrip")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewedTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ReviewedTrip");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Trip", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.TripLocation", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.Location", "AssociatedLocation")
                        .WithMany("Trips")
                        .HasForeignKey("AssociatedLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.DataClasses.Trip", "AssociatedTrip")
                        .WithMany("TripLocations")
                        .HasForeignKey("AssociatedTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedLocation");

                    b.Navigation("AssociatedTrip");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.UserReviewVote", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.Review", "AssociatedReview")
                        .WithMany("UserReviewVotes")
                        .HasForeignKey("AssociatedReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.DataClasses.User", "AssociatedUser")
                        .WithMany("UserReviewVotes")
                        .HasForeignKey("AssociatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedReview");

                    b.Navigation("AssociatedUser");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.UserTrip", b =>
                {
                    b.HasOne("DataAccessLayer.DataClasses.Trip", "Trip")
                        .WithMany("Participants")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.DataClasses.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Location", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Review", b =>
                {
                    b.Navigation("UserReviewVotes");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.Trip", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Reviews");

                    b.Navigation("TripLocations");
                });

            modelBuilder.Entity("DataAccessLayer.DataClasses.User", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Trips");

                    b.Navigation("UserReviewVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
